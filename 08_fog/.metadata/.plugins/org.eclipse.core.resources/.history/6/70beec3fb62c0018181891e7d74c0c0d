package org.fog.scheduling.localSearchAlgorithm;

import java.util.List;

import org.cloudbus.cloudsim.Cloudlet;
import org.fog.entities.FogDevice;
import org.fog.scheduling.gaEntities.Individual;

public class LocalSearchAlgorithm {

	public LocalSearchAlgorithm() {
		
	}
	
	/**
	 * Calculate fitness for an individual.
	 * 
	 * In this case, the fitness score is very simple: it's the number of ones
	 * in the chromosome. Don't forget that this method, and this whole
	 * GeneticAlgorithm class, is meant to solve the problem in the "AllOnesGA"
	 * class and example. For different problems, you'll need to create a
	 * different version of this method to appropriately calculate the fitness
	 * of an individual.
	 * 
	 * @param individual
	 *            the individual to evaluate
	 * @return double The fitness value for individual
	 */
	public double calcFitness(Individual individual, List<FogDevice> fogDevices, List<? extends Cloudlet> cloudletList) {

		double minTime = calcMinTime(fogDevices, cloudletList);
		
		// clear the fogDevice - task list before calculate
		for(FogDevice fogDevice : fogDevices) {
			fogDevice.getCloudletListAssignment().clear();
		}
		
		// Loop over individual's genes to all the task assigned to the fogDevice
		for (int geneIndex = 0; geneIndex < individual.getChromosomeLength(); geneIndex++) {
			//add current cloudlet to fog device respectively
			fogDevices.get(individual.getGene(geneIndex)).getCloudletListAssignment().add(cloudletList.get(geneIndex));
		}
 
		//Calculate makespan and cost
		double makespan = 0;
		double execTime = 0;
		for(FogDevice fogDevice : fogDevices) {
			double totalLength = 0;
			for(Cloudlet cloudlet : fogDevice.getCloudletListAssignment()) {
				totalLength += cloudlet.getCloudletLength();
			}
			
			execTime = totalLength / fogDevice.getHostList().get(0).getTotalMips();
			
			if (execTime > makespan) {
				makespan = execTime;
			}
		}
		
		//store makespan
		individual.setTime(makespan);
		
		// Calculate fitness
		double fitness = minTime / makespan;

		// Store fitness
		individual.setFitness(fitness);
		return fitness;
	}
	
	// the function calculate the lower bound of the solution about time execution
		private double calcMinTime(List<FogDevice> fogDevices, List<? extends Cloudlet> cloudletList) {
			double minTime = 0;
			double totalLength = 0;
			double totalMips = 0;
			for(Cloudlet cloudlet : cloudletList) {
				totalLength += cloudlet.getCloudletLength();
			}
			for(FogDevice fogDevice : fogDevices) {
				totalMips += fogDevice.getHost().getTotalMips();
			}
			minTime = totalLength / totalMips;
			return minTime;
		}
}
