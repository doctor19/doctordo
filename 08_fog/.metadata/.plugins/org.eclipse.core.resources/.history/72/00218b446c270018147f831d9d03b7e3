package org.fog.scheduling;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.cloudbus.cloudsim.Host;
import org.cloudbus.cloudsim.Log;
import org.cloudbus.cloudsim.Pe;
import org.cloudbus.cloudsim.Storage;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.power.PowerHost;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;
import org.cloudbus.cloudsim.sdn.overbooking.BwProvisionerOverbooking;
import org.cloudbus.cloudsim.sdn.overbooking.PeProvisionerOverbooking;
import org.fog.application.AppEdge;
import org.fog.application.AppLoop;
import org.fog.application.Application;
import org.fog.application.selectivity.FractionalSelectivity;
import org.fog.entities.FogBroker;
import org.fog.entities.FogDevice;
import org.fog.entities.FogDeviceCharacteristics;
import org.fog.entities.Tuple;
import org.fog.policy.AppModuleAllocationPolicy;
import org.fog.scheduler.StreamOperatorScheduler;
import org.fog.utils.FogLinearPowerModel;
import org.fog.utils.FogUtils;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

public class FogSchedulingExample {
	static List<FogDevice> fogDevices = new ArrayList<FogDevice>();
	static FogDevice smartGateway;

	private static boolean CLOUD = false;
	public static String fileName = "C:/Users/Tonny Tran/Desktop/fog00";
	public static String fileName_cloudlet = "data/data.csv";

	public static void main(String[] args) {

		Log.printLine("Starting scheduling simulation...");

		try {
			Log.disable();
			int num_user = 1; // number of cloud users
			Calendar calendar = Calendar.getInstance();
			boolean trace_flag = false; // mean trace events

			CloudSim.init(num_user, calendar, trace_flag);

			String appId = "scheduler"; // identifier of the application

			FogBroker broker = new FogBroker("broker");

			Application application = createApplication(appId, broker.getId());
			application.setUserId(broker.getId());

		//initiate the fog-cloud devices list from json file
			fogDevices = createFogDevices(broker.getId(), appId);
			broker.setFogDevices(fogDevices);
			
		//initiate the cloudlet list - bag of tasks from file
			
			
			//
			// Controller controller = null;
			//
			// ModuleMapping moduleMapping =
			// ModuleMapping.createModuleMapping(); // initializing a module
			// mapping
			// for(FogDevice device : fogDevices){
			// if(device.getName().startsWith("m")){ // names of all Smart
			// Cameras start with 'm'
			// moduleMapping.addModuleToDevice("motion_detector",
			// device.getName()); // fixing 1 instance of the Motion Detector
			// module to each Smart Camera
			// }
			// }
			// moduleMapping.addModuleToDevice("user_interface", "cloud"); //
			// fixing instances of User Interface module in the Cloud
			// if(CLOUD){
			// // if the mode of deployment is cloud-based
			// moduleMapping.addModuleToDevice("object_detector", "cloud"); //
			// placing all instances of Object Detector module in the Cloud
			// moduleMapping.addModuleToDevice("object_tracker", "cloud"); //
			// placing all instances of Object Tracker module in the Cloud
			// }
			//
			// controller = new Controller("master-controller", fogDevices,
			// sensors,
			// actuators);
			//
			// controller.submitApplication(application,
			// (CLOUD)?(new ModulePlacementMapping(fogDevices, application,
			// moduleMapping))
			// :(new ModulePlacementEdgewards(fogDevices, sensors, actuators,
			// application, moduleMapping)));
			//
			// TimeKeeper.getInstance().setSimulationStartTime(Calendar.getInstance().getTimeInMillis());
			//
			// CloudSim.startSimulation();
			//
			// CloudSim.stopSimulation();
			//
			// Log.printLine("VRGame finished!");
		} catch (Exception e) {
			e.printStackTrace();
			Log.printLine("Unwanted errors happen");
		}
	}

	/**
	 * Creates the fog devices in the physical topology of the simulation.
	 * 
	 * @param userId
	 * @param appId
	 */
	private static List<FogDevice> createFogDevices(int userId, String appId) {
		return jsonToInfrucstruture(fileName);
	}

	// read file to convert JSON object to Fog device object
	public static List<FogDevice> jsonToInfrucstruture(String fileName) {

		List<FogDevice> fogDevices = new ArrayList<FogDevice>();

		try {
			JSONObject doc = (JSONObject) JSONValue.parse(new FileReader(fileName));
			JSONArray nodes = (JSONArray) doc.get("nodes");
			@SuppressWarnings("unchecked")
			Iterator<JSONObject> iter = nodes.iterator();
			while (iter.hasNext()) {
				JSONObject node = iter.next();
				String nodeType = (String) node.get("type");
				String nodeName = (String) node.get("name");

				if (nodeType.equals("FOG_DEVICE")) {
					long mips = (Long) node.get("mips");
					int ram = new BigDecimal((Long) node.get("ram")).intValueExact();
					long upBw = new BigDecimal((Long) node.get("upBw")).intValueExact();
					long downBw = new BigDecimal((Long) node.get("downBw")).intValueExact();
					int level = new BigDecimal((Long) node.get("level")).intValue();
					double rate = new BigDecimal((Double) node.get("ratePerMips")).doubleValue();

					FogDevice fogDevice = createFogDevice(nodeName, mips, ram, upBw, downBw, level, rate, 16 * 103,
							16 * 83.25);
					if (nodeName.equals("SmartGateway")) {
						fogDevice.setParentId(-1);
						smartGateway = fogDevice;
					} else {
						fogDevices.add(fogDevice);
					}

				}
			}
			for (int i = 0; i < fogDevices.size(); i++) {
				fogDevices.get(i).setParentId(smartGateway.getId());
			}

			// JSONArray links = (JSONArray) doc.get("links");
			// @SuppressWarnings("unchecked")
			// Iterator<JSONObject> linksIter =links.iterator();
			// while(linksIter.hasNext()){
			// JSONObject link = linksIter.next();
			// String src = (String) link.get("source");
			// String dst = (String) link.get("destination");
			// double lat = (Double) link.get("latency");
			//
			// Node source = (Node) getNode(graph, src);
			// Node target = (Node) getNode(graph, dst);
			//
			// if(source!=null && target!=null){
			// System.out.println("Adding edge between "+source.getName()+"
			// & "+target.getName());
			// Edge edge = new Edge(target, lat);
			// graph.addEdge(source, edge);
			// }
			// }
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		System.out.println("############################");
		System.out.println("Read data to Fog Infrucstructure successfully");
		System.out.println("############################");
		System.out.println(fogDevices.size());
		return fogDevices;
	}

	/**
	 * Creates a vanilla fog device
	 * 
	 * @param nodeName
	 *            name of the device to be used in simulation
	 * @param mips
	 *            MIPS
	 * @param ram
	 *            RAM
	 * @param upBw
	 *            uplink bandwidth
	 * @param downBw
	 *            downlink bandwidth
	 * @param level
	 *            hierarchy level of the device
	 * @param ratePerMips
	 *            cost rate per MIPS used
	 * @param busyPower
	 * @param idlePower
	 * @return
	 */
	private static FogDevice createFogDevice(String nodeName, long mips, int ram, long upBw, long downBw, int level,
			double ratePerMips, double busyPower, double idlePower) {

		List<Pe> peList = new ArrayList<Pe>();

		// 3. Create PEs and add these into a list.
		peList.add(new Pe(0, new PeProvisionerOverbooking(mips))); // need to
																	// store Pe
																	// id and
																	// MIPS
																	// Rating

		int hostId = FogUtils.generateEntityId();
		long storage = 1000000; // host storage
		int bw = 10000;

		PowerHost host = new PowerHost(hostId, new RamProvisionerSimple(ram), new BwProvisionerOverbooking(bw), storage,
				peList, new StreamOperatorScheduler(peList), new FogLinearPowerModel(busyPower, idlePower));

		List<Host> hostList = new ArrayList<Host>();
		hostList.add(host);

		String arch = "x86"; // system architecture
		String os = "Linux"; // operating system
		String vmm = "Xen";
		double time_zone = 10.0; // time zone this resource located
		double cost = 3.0; // the cost of using processing in this resource
		double costPerMem = 0.05; // the cost of using memory in this resource
		double costPerStorage = 0.001; // the cost of using storage in this
										// resource
		double costPerBw = 0.0; // the cost of using bw in this resource
		LinkedList<Storage> storageList = new LinkedList<Storage>(); // we are
																		// not
																		// adding
																		// SAN
		// devices by now

		FogDeviceCharacteristics characteristics = new FogDeviceCharacteristics(arch, os, vmm, host, time_zone, cost,
				costPerMem, costPerStorage, costPerBw);

		FogDevice fogdevice = null;
		try {
			fogdevice = new FogDevice(nodeName, characteristics, new AppModuleAllocationPolicy(hostList), storageList,
					10, upBw, downBw, 0, ratePerMips);
		} catch (Exception e) {
			e.printStackTrace();
		}

		fogdevice.setLevel(level);
		return fogdevice;
	}

}
